{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59a7c3d2-dd87-4d69-8333-10301e8fa213",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import tarfile\n",
    "import torch\n",
    "import torchvision\n",
    "from torchvision import transforms\n",
    "from PIL import Image\n",
    "import pandas as pd\n",
    "\n",
    "# Extract the dataset from the provided location\n",
    "dataset_path = 'CUB_200_2011.tgz'  # Update with your local path if needed\n",
    "extract_path = 'cub_dataset'\n",
    "\n",
    "if not os.path.exists(extract_path):\n",
    "    with tarfile.open(dataset_path, 'r:gz') as tar:\n",
    "        tar.extractall(path=extract_path)\n",
    "\n",
    "# Dataset path adjustment\n",
    "images_path = os.path.join(extract_path, 'CUB_200_2011', 'images')\n",
    "\n",
    "# Custom Dataset Class for Faster R-CNN\n",
    "class CustomDataset(torch.utils.data.Dataset):\n",
    "    def __init__(self, root, transforms=None):\n",
    "        self.root = root\n",
    "        self.transforms = transforms\n",
    "        self.imgs = list(sorted(os.listdir(os.path.join(root, \"CUB_200_2011\", \"images\"))))\n",
    "        images = pd.read_csv(os.path.join(root, 'CUB_200_2011', 'images.txt'), sep=\" \", names=[\"img_id\", \"filepath\"])\n",
    "        bboxes = pd.read_csv(os.path.join(root, 'CUB_200_2011', 'bounding_boxes.txt'), sep=\" \", names=[\"img_id\", \"x\", \"y\", \"width\", \"height\"])\n",
    "        labels = pd.read_csv(os.path.join(root, 'CUB_200_2011', 'image_class_labels.txt'), sep=\" \", names=[\"img_id\", \"class_id\"])\n",
    "        split = pd.read_csv(os.path.join(root, 'CUB_200_2011', 'train_test_split.txt'), sep=\" \", names=[\"img_id\", \"is_train\"])\n",
    "        self.metadata = images.merge(bboxes, on=\"img_id\").merge(labels, on=\"img_id\").merge(split, on=\"img_id\")\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        data = self.metadata.iloc[idx]\n",
    "        img_path = os.path.join(self.root, 'CUB_200_2011', 'images', data['filepath'])\n",
    "        image = Image.open(img_path).convert(\"RGB\")\n",
    "\n",
    "        x, y, width, height = data['x'], data['y'], data['width'], data['height']\n",
    "        boxes = torch.tensor([[x, y, x + width, y + height]], dtype=torch.float32)\n",
    "        labels = torch.tensor([data['class_id'] - 1], dtype=torch.int64)\n",
    "\n",
    "        mask = torch.zeros((1, int(image.height), int(image.width)), dtype=torch.uint8)\n",
    "        target = {\"boxes\": boxes, \"labels\": labels, \"masks\": mask}\n",
    "\n",
    "        if self.transforms:\n",
    "            image = self.transforms(image)\n",
    "\n",
    "        return image, target\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.imgs)\n",
    "\n",
    "# Define the transforms and dataset\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((256, 256)),  # Resize to speed up training\n",
    "    transforms.ToTensor()\n",
    "])\n",
    "\n",
    "dataset = CustomDataset(root=extract_path, transforms=transform)\n",
    "data_loader = torch.utils.data.DataLoader(dataset, batch_size=2, shuffle=True, num_workers=2, collate_fn=lambda x: tuple(zip(*x)))\n",
    "\n",
    "# Load the pre-trained Faster R-CNN model\n",
    "model = torchvision.models.detection.fasterrcnn_resnet50_fpn(weights=torchvision.models.detection.FasterRCNN_ResNet50_FPN_Weights.COCO_V1)\n",
    "\n",
    "# Update the classifier head\n",
    "num_classes = 201  # Update with the number of classes including background\n",
    "in_features = model.roi_heads.box_predictor.cls_score.in_features\n",
    "model.roi_heads.box_predictor = torchvision.models.detection.faster_rcnn.FastRCNNPredictor(in_features, num_classes)\n",
    "\n",
    "# Set the device\n",
    "device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n",
    "model.to(device)\n",
    "\n",
    "# Optimizer setup\n",
    "params = [p for p in model.parameters() if p.requires_grad]\n",
    "optimizer = torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)\n",
    "\n",
    "# Training loop\n",
    "num_epochs = 5  # Reduce number of epochs for initial testing\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    i = 0\n",
    "    for images, targets in data_loader:\n",
    "        images = list(image.to(device) for image in images)\n",
    "        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n",
    "\n",
    "        # Calculate loss\n",
    "        loss_dict = model(images, targets)\n",
    "        losses = sum(loss for loss in loss_dict.values())\n",
    "\n",
    "        # Backpropagation\n",
    "        optimizer.zero_grad()\n",
    "        losses.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        i += 1\n",
    "        print(f\"Epoch [{epoch + 1}/{num_epochs}], Step [{i}/{len(data_loader)}], Loss: {losses.item():.4f}\")\n",
    "\n",
    "print(\"Training completed!\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
